using System;
using System.Linq;
using System.Windows.Forms;

namespace WindowsFormsApp1
{

    /// <summary>
    /// A basic calculator 
    /// </summary>
    public partial class Calculator : Form
    {

        #region Constructor

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Calculator()
        {
            InitializeComponent();
        }

        #endregion

        #region ClearFuntions
        /// <summary>
        /// Clears the Input text from user
        /// </summary>
        /// <param name="sender">The even sender</param>
        /// <param name="e">The even arguements</param>
        private void ClearAll_Click(object sender, EventArgs e)
        {
            // Clears the text from the user input text
            this.Sumbox.Text = string.Empty;

            //focuses the user input text
            FocusInputText();
        }

        private void Clear_Click(object sender, EventArgs e)
        {

        }

        private void Delete_Click(object sender, EventArgs e)
        {
            //Delete the value after the selected posistion
            DeleteTextValue();

            //focuses the user input text
            FocusInputText();
        }

        #endregion

        #region ButtonMethods

        /// <summary>
        /// Adds the number 1 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button1_Click(object sender, EventArgs e)
        {
            InsertTextValue("1");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the number 2 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button2_Click(object sender, EventArgs e)
        {
            InsertTextValue("2");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the number 3 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button3_Click(object sender, EventArgs e)
        {
            InsertTextValue("3");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the dot "." to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DotButton_Click(object sender, EventArgs e)
        {
            InsertTextValue(".");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the number 0 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button0_Click(object sender, EventArgs e)
        {
            InsertTextValue("0");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the number 9 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button9_Click(object sender, EventArgs e)
        {
            InsertTextValue("9");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the number 8 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button8_Click(object sender, EventArgs e)
        {
            InsertTextValue("8");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the number 7 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button7_Click(object sender, EventArgs e)
        {
            InsertTextValue("7");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the number 4 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button4_Click(object sender, EventArgs e)
        {
            InsertTextValue("4");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the number 5 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button5_Click(object sender, EventArgs e)
        {
            InsertTextValue("5");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the number 6 to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button6_Click(object sender, EventArgs e)
        {
            InsertTextValue("6");

            //focuses the user input text
            FocusInputText();
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }
        private void WhoCaresButton_Click(object sender, EventArgs e)
        {


        }
        #endregion

        #region OperatorFunctions

        /// <summary>
        /// Adds the percent character to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Percent_Click(object sender, EventArgs e)
        {
            InsertTextValue("%");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the divide character to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Divide_Click(object sender, EventArgs e)
        {
            InsertTextValue("/");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the multiply character to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Multiply_Click(object sender, EventArgs e)
        {
            InsertTextValue("*");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the minus character to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Negative_Click(object sender, EventArgs e)
        {
            InsertTextValue("-");

            //focuses the user input text
            FocusInputText();
        }

        /// <summary>
        /// Adds the plus character to the text at the currently selected position
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Positive_Click(object sender, EventArgs e)
        {
            InsertTextValue("+");

            //focuses the user input text
            FocusInputText();
        }
        private void SUM_Click(object sender, EventArgs e)
        {
            CalculateEquation();
        }



        #endregion

        /// <summary>
        /// Calculate the given equation and outputs the answer to the user text box
        /// </summary>
        private void CalculateEquation()
        {

            this.CalculationResult.Text = ParseOperation();

            FocusInputText();
        }
        /// <summary>
        /// Parses the users equation and calculates the result
        /// </summary>
        /// <returns></returns>
        private string ParseOperation()
        {
            try
            {
                // Get the users equation input
                var input = this.Sumbox.Text;

                // Remove all spaces
                input = input.Replace(" ", "");

                // Create a new top-level operation
                var operation = new Operation();
                var leftSide = true;

                for (int i = 0; i < input.Length; i++)
                {
                    if ("0123456789.".Any(c => input[i] == c))
                    {
                        if (leftSide)

                            operation.LeftSide = addNumberPart(operation.LeftSide, input[i]);
                        else
                            operation.RightSide = addNumberPart(operation.RightSide, input[i]);
                    }
                    //If it is an operator ( + - * / ) set the operator type
                    else if ("+-*/.".Any(c => input[i] == c))
                    {
                        // If we are on the right side already, we dont need to calculate our current operation
                        // and set the result to the left side of the next operation
                        if (!leftSide)
                        {
                            // Get the operator type
                            var operatorType = GetOperationType(input[i]);

                            // Check if we actually have a right side number
                            if (operation.RightSide.Length == 0)
                            {
                                // Check the operator is not a minus (as they could be creating a negative number)
                                if (operatorType != OperationType.Minus)
                                    throw new InvalidOperationException($"Operator (+ * / or more then one -) specified without an right side number");

                                // If we got here, the operator type is a minus, and there is no left number currently, so add the minus to the number
                                operation.RightSide += input[i];
                            }
                            else
                            {
                                // Calculate previous equation and set to the left side
                                operation.LeftSide = CalculateOperation(operation);

                                // Set new operator
                                operation.OperationType = operatorType;

                                //Clear the prvious right number
                                operation.RightSide = string.Empty;
                            }
                        }
                        else
                        {
                            // Get the operator type
                            var operatorType = GetOperationType(input[i]);

                            // Check if we actually have a left side number
                            if (operation.LeftSide.Length == 0)
                            {
                                // Check the operator is not a minus (as they could be creating a negative number)
                                if (operatorType != OperationType.Minus)
                                    throw new InvalidOperationException($"Operator (+ * / or more then one -) specified without an left side number");

                                // If we got here, the operator type is a minus, and there is no left number currently, so add the minus to the number
                                operation.LeftSide += input[i];
                            }
                            else
                            {
                                //If we get here, we have a left number and now an operator, so we want to move to the right side

                                // Set the operation type
                                operation.OperationType = operatorType;

                                // Move to the right side
                                leftSide = false;
                            }
                        }
                    }
                }

                // If we are done parsing, and there were no exceptions
                // Calculate the current operation
                return CalculateOperation(operation);

            }
            catch(Exception ex)
            {
                return $"invalid equation. {ex.Message}";
            }
        }

        /// <summary>
        /// Calculates an <see cref="Operation"/> and returns the result
        /// </summary>
        /// <param name="operation">The operation to calculate</param>
        private string CalculateOperation(Operation operation)
        {
            // Store the number values of the string representations
            decimal left = 0;
            decimal right = 0;

            // Check if we have a valid left side number
            if (string.IsNullOrEmpty(operation.LeftSide) || !decimal.TryParse(operation.LeftSide, out left))
                throw new InvalidOperationException($"Left side of the operation was not a number. {operation.LeftSide}");

            // Check if we have a valid right side number
            if (string.IsNullOrEmpty(operation.RightSide) || !decimal.TryParse(operation.RightSide, out right))
                throw new InvalidOperationException($"Right side of the operation was not a number. {operation.RightSide}");

            try
            {
                switch (operation.OperationType)
                {
                    case OperationType.Add:
                        return (left + right).ToString();
                    case OperationType.Minus:
                        return (left - right).ToString();
                    case OperationType.Divide:
                        return (left / right).ToString();
                    case OperationType.Multiply:
                        return (left * right).ToString();
                    default:
                        throw new InvalidOperationException($"Unknown operator type when calculating operation. {operation.OperationType}");
                }
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"Failed to calculate operation {operation.LeftSide} {operation.OperationType} {operation.RightSide}. {ex.Message}");
            }

            

        }

        /// <summary>
        /// Accepts a character and returns the known <see cref="OperationType"/>
        /// </summary>
        /// <param name="character"></param>
        /// <returns></returns>
        private OperationType GetOperationType(char character)
        {
            switch(character)
            {
                case '+':

                    return OperationType.Add;
                case '-':

                    return OperationType.Minus;
                case '/':

                    return OperationType.Divide;
                case '*':

                    return OperationType.Multiply;
                default:
                    throw new InvalidOperationException($"Unknown operator type {character}");
            }
        }

        /// <summary>
        /// Attempts to add a new character to the current number, checking for valid characters as it goes
        /// </summary>
        /// <param name="currentNumber">The current number string</param>
        /// <param name="newCharacter">The new character to append to the string</param>
        /// <returns></returns>
        private string addNumberPart(string currentNumber, char newCharacter)
        {
            //Check if there is already a . in the number
            if (newCharacter == '.' && currentNumber.Contains('.'))
                throw new InvalidOperationException($"Number {currentNumber} already contains a . and another cannot be added");

            return currentNumber + newCharacter;
        }

        #region Private Helpers
        /// <summary>
        /// focuses the user input text
        /// </summary>
        private void FocusInputText()
        {
            this.Sumbox.Focus();

        }
        /// <summary>
        /// Inserts the given text into the input text box
        /// </summary>
        /// <param name="value">The value to insert</param>
        private void InsertTextValue(string value)
        {
            //remember selection start
            var selectionStart = this.Sumbox.SelectionStart;

            //set new text
            this.Sumbox.Text = this.Sumbox.Text.Insert(this.Sumbox.SelectionStart, value);

            //restore the selection start
            this.Sumbox.SelectionStart = selectionStart + value.Length;

            //Set selection lenght to 1
            this.Sumbox.SelectionLength = 0;
        }

        /// <summary>
        /// Deletes the character to the right of the selection start of the user input text box
        /// </summary>
        private void DeleteTextValue()
        {
            //If we dont have a value to delete, return
            if (this.Sumbox.Text.Length < this.Sumbox.SelectionStart + 1)
                return;

            //remember selection start
            var selectionStart = this.Sumbox.SelectionStart;

            //Delete the character to the right of the selection
            this.Sumbox.Text = this.Sumbox.Text.Remove(this.Sumbox.SelectionStart, 1);

            //restore the selection start
            this.Sumbox.SelectionStart = selectionStart;

            //Set selection lenght to 1
            this.Sumbox.SelectionLength = 0;
        }
        #endregion
    }
}
